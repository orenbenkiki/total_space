Total Space
===========

Investigate the total state space of communicating finite state machines. Specifically,
given a model of a system comprising of
multiple agents,
where each agent is a non-deterministic state machine,
which responds to either time or receiving a message with one of some possible actions,
where each such action can change the agent state and/or send messages to other agents;
Then this package will generate the total possible state space of the overall system,
validate the model for completeness,
validate each system state for additional arbitrary correctness criteria,
and visualize the states and transitions in various ways.

Requirements
------------

Python 3.5 or above.

Installation
------------

Run ``pip3 --install total_space``.

Usage
-----

Create a ``model.py`` file that:

* Imports the ``total_space`` module.

* Declares state and agent classes for modeling some system.

* Provides functions for:

  * (Optionally) add command line flags to control the model creation.

  * Create a function that creates the model given the parsed command line flags.

  * (Optionally) report invalid conditions in a global system configuration.

* Invokes the ``total_space.main`` function, passing it the above.

You can now run ``python3 model.py`` to do the following:

* Generate a list of all the possible system configuration states.
  Each system configuration state contains the state of all the agents,
  the messages that are in flight, and invalid conditions (if any).
  A complete and correct model would contain no invalid conditions.

* Generates a tab-separated file of all the transitions between the possible system configuration states.
  The code doesn't generate any transitions from an invalid system configuration state.

* Generate a ``dot`` file visualizing the transitions between the system configuration states.
  Invalid system configuration states are highlighted.

* Focus only on the states of specific agent(s).

Run ``python3 model.py -h`` for details.

Example
-------

A very simple model of a server with any number of clients (serving one request at a time) is
available in the tests directory. It demonstrates the basic usage of this package.

Just looking at all the possible states, generated by ``python3 -m total_space.simple_model states``
can also be useful to get a feel for the model. One can also generate all the transitions as a
tab-separated file using ``transitions`` instead. These are also useful for further automated
processing. However these aren't very useful in communicating the model's logic to humans.

To generate diagrams for visualizing the state machine, you can run ``python3 -m
total_space.simple_model dot | dot -Tpng > complete.png``. This will generate a large, detailed,
but `complete <images/complete.png?raw=true>`_ diagram, which might still be useful when debugging
complex paths to debug `partial <images/partial.png?raw=true>`_ or `invalid
<images/invalid.png?raw=true>`_ models.

It is possible to use ``--focus AGENT`` (possibly several times) to ignore agents which are not in
the focus. For example, using ``--focus client-1`` focuses on a single `client
<images/focus.client-1.png?raw=true>`_, which works pretty well. We also get a pretty reasonable
diagram focusing on the `server <images/focus.server.1.png?raw=true>`_ for a single-client system;
less so for `two clients <images/focus.server.2.png?raw=true>`_.

To generate more legible diagrams, it is possible to merge total system configuration states by
using ``--names`` to ignore the internal state data and/or using ``--agents`` to ignore the
messages-in-flight. Doing both gives a simpler `agents <images/agents.png?raw=true>`_ diagram, at the cost of
leaving out the messages passed between the agents and the details of their internal state.

All the above options simply rename and merge otherwise-different system configuration states. Note
this is done as a post-processing on the computed total states space, but prior to executing the
selected command. That is, these flags are specified before the actual command (e.g. ``--names
--focus server dot``) and can also be applied to generate simplified states or transition files.

A different set of options modifies the graph in an additional post-processing step, just prior to
generating the ``dot`` diagram (hence, these flags must be giving following the ``dot`` command line
flag). Using ``--cluster AGENT`` will cluster together all nodes with the same state of the
specified agent (possibly repeated for nested clusters). Using ``--messages`` will create a separate
node for each in-flight message, and using ``--merge`` will merge nodes that only differ by the list
of in-flight messages. This is different from ``--agents`` above since here we keep the transitions
between the states, and only merge them to a single node at the last moment.

For example, clustering by server state (``--focus server dot --cluster server``) will `help
<images/cluster.server.png?raw=true>`_ somewhat when focusing on the server in a two-client system -
in particular, we can see that the server can stay indefinitely in the "busy" state if the clients
keep hammering it with requests. We also get pretty good results using both the ``--messages`` and
``--merge`` options, discarding the internal data of the agents using ``--names``, and using
``--focus`` to focus on the `client <images/detail.client-1.png?raw=true>`_ (using ``--names --focus
client-1 dot --messages --merge``). It even works well on the `server
<images/detail.server.png?raw=true>`_, with almost no impact from the existence of two clients. This
also works pretty well demonstrating the issue with a `partial
<images/partial.server.png?raw=true>`_ or an `invalid <images/invalid.server.png?raw=true>`_ model,
at least as long as the focus is on the correct agent; otherwise, the `result
<images/partial.client-1.png?raw=true>`_ isn't ideal.

The bottom line is, YMMV. Choosing the right combination of restrictions to highlight specific parts
of the logic depends very much both on the model and on what you are trying to achieve in the
specific diagram.
